2024-11-14:14:12:17 [INFO    ] [prototype.py:124] {'amp': False,
 'attack': 'badnet',
 'attack_label_trans': 'all2one',
 'attack_target': 0,
 'batch_size': 128,
 'bd_yaml_path': './config/attack/badnet/default.yaml',
 'client_optimizer': 'AdamW',
 'dataset': 'cifar10',
 'dataset_path': './data/cifar10',
 'device': 'cuda:1',
 'epochs': 10,
 'frequency_save': 0,
 'img_size': (32, 32, 3),
 'input_channel': 3,
 'input_height': 32,
 'input_width': 32,
 'lr': 0.0001,
 'lr_scheduler': 'CosineAnnealingLR',
 'model': 'vit_b_16',
 'non_blocking': True,
 'num_classes': 10,
 'num_workers': 4,
 'patch_mask_path': './resource/badnet/trigger_image.png',
 'pin_memory': True,
 'pratio': 0.1,
 'prefetch': False,
 'random_seed': 0,
 'save_folder_name': 'badnet_0_1_ViT',
 'save_path': './record/badnet_0_1_ViT',
 'sgd_momentum': 0.9,
 'terminal_info': ['./attack/badnet.py',
                   '--save_folder_name',
                   'badnet_0_1_ViT',
                   '--dataset',
                   'cifar10',
                   '--dataset_path',
                   './data',
                   '--random_seed',
                   '0',
                   '--device',
                   'cuda:1',
                   '--client_optimizer',
                   'AdamW',
                   '--bd_yaml_path',
                   './config/attack/badnet/default.yaml',
                   '--epochs',
                   '10',
                   '--model',
                   'vit_b_16',
                   '--lr',
                   '0.0001'],
 'wd': 0.0005,
 'yaml_path': './config/attack/prototype/cifar10.yaml'}
2024-11-14:14:12:17 [DEBUG   ] [prototype.py:126] Only INFO or above level log will show in cmd. DEBUG level log only will show in log file.
2024-11-14:14:12:17 [DEBUG   ] [prototype.py:130] {'git hash': None,
 'last 3 log': 'commit f2ca5f8f4b58e07a407dd65ca217f11673aba63d\n'
               'Author: soheilzi <soheil.zibakhsh@gmail.com>\n'
               'Date:   Tue Nov 12 09:46:15 2024 -0800\n'
               '\n'
               '    added the adverserial test, added the trojan tests with '
               'MG\n'
               '\n'
               'commit afd704e7564791ddc0ae120c7d2e1581bd3a4f80\n'
               'Author: Yaman <yamanjandali@gmail.com>\n'
               'Date:   Fri Nov 8 16:15:34 2024 -0800\n'
               '\n'
               '    removed added files\n'
               '\n'
               'commit 9bc0c704e4be5beff4562e38a15f0b4e070bb433\n'
               'Author: Yaman <yamanjandali@gmail.com>\n'
               'Date:   Tue Nov 5 10:24:03 2024 -0800\n'
               '\n'
               '    updated train_settings_generate.py file',
 'status': 'On branch main\n'
           "Your branch is up to date with 'origin/main'.\n"
           '\n'
           'Changes not staged for commit:\n'
           '  (use "git add <file>..." to update what will be committed)\n'
           '  (use "git restore <file>..." to discard changes in working '
           'directory)\n'
           '\tmodified:   attack/trojannn.py\n'
           '\tmodified:   config/attack/badnet/default.yaml\n'
           '\tmodified:   config/attack/trojannn/vit_b_16.yaml\n'
           '\tmodified:   config/attack/wanet/default.yaml\n'
           '\tmodified:   testing_adverserial/adverserial_test.ipynb\n'
           '\n'
           'Untracked files:\n'
           '  (use "git add <file>..." to include in what will be committed)\n'
           '\tattackOut.txt\n'
           '\tconfig-vit/\n'
           '\trecord/badnet_0_1_ViT/\n'
           '\trecord/blended_0_1_ViT/\n'
           '\trecord/wanet_0_1_ViT/\n'
           '\tresource/clean_model/\n'
           '\trun_attacks.sh\n'
           '\trun_attacks2.sh\n'
           '\trun_defenses.sh\n'
           '\ttesting_adverserial/adverserial_test2.ipynb\n'
           '\n'
           'no changes added to commit (use "git add" and/or "git commit -a")'}
2024-11-14:14:12:17 [INFO    ] [badnet.py:111] stage1 start
2024-11-14:14:12:18 [DEBUG   ] [prototype.py:152] dataset_and_transform_generate done
2024-11-14:14:12:18 [DEBUG   ] [bd_dataset_v2.py:68] Not DatasetFolder or ImageFolder, so iter through
2024-11-14:14:12:19 [DEBUG   ] [bd_dataset_v2.py:68] Not DatasetFolder or ImageFolder, so iter through
2024-11-14:14:12:20 [DEBUG   ] [backdoor_generate_poison_index.py:35] Reminder: plz note that if p_num or pratio exceed the number of possible candidate samples
 then only maximum number of samples will be applied
2024-11-14:14:12:20 [DEBUG   ] [backdoor_generate_poison_index.py:36] Reminder: priority p_num > pratio, and choosing fix number of sample is prefered if possible 
2024-11-14:14:12:20 [INFO    ] [backdoor_generate_poison_index.py:61] poison num:5000.0,real pratio:0.1
2024-11-14:14:12:20 [DEBUG   ] [badnet.py:141] poison train idx is saved
2024-11-14:14:12:20 [INFO    ] [bd_dataset_v2.py:133] save file format is .png
2024-11-14:14:12:21 [DEBUG   ] [backdoor_generate_poison_index.py:35] Reminder: plz note that if p_num or pratio exceed the number of possible candidate samples
 then only maximum number of samples will be applied
2024-11-14:14:12:21 [DEBUG   ] [backdoor_generate_poison_index.py:36] Reminder: priority p_num > pratio, and choosing fix number of sample is prefered if possible 
2024-11-14:14:12:21 [INFO    ] [backdoor_generate_poison_index.py:61] poison num:9000.0,real pratio:0.9
2024-11-14:14:12:21 [INFO    ] [bd_dataset_v2.py:133] save file format is .png
2024-11-14:14:12:24 [INFO    ] [badnet.py:193] stage2 start
2024-11-14:14:12:24 [DEBUG   ] [model_trainer_generate.py:59] image_size ONLY apply for vit!!!
If you use vit make sure you set the image size!
2024-11-14:14:12:24 [DEBUG   ] [model_trainer_generate.py:122] All vit model use the default pretrain and resize to match the input shape!
2024-11-14:14:12:26 [DEBUG   ] [trainer_cls.py:1765] This class REQUIRE bd dataset to implement overwrite methods. This is NOT a general class for all cls task.
2024-11-14:14:12:26 [INFO    ] [trainer_cls.py:972] Do NOT set the settings/parameters attr manually after you start training!
You may break the relationship between them.
2024-11-14:14:12:26 [INFO    ] [trainer_cls.py:1030] ('epoch_now:0, '
 'batch_now:0self.amp:False,self.criterion:CrossEntropyLoss(),self.optimizer:AdamW '
 '(\n'
 'Parameter Group 0\n'
 '    amsgrad: False\n'
 '    betas: (0.9, 0.999)\n'
 '    capturable: False\n'
 '    differentiable: False\n'
 '    eps: 1e-08\n'
 '    foreach: None\n'
 '    fused: None\n'
 '    initial_lr: 0.0001\n'
 '    lr: 0.0001\n'
 '    maximize: False\n'
 '    weight_decay: 0.01\n'
 "),self.scheduler:{'T_max': 100, 'eta_min': 0, 'base_lrs': [0.0001], "
 "'last_epoch': 0, 'verbose': False, '_step_count': 1, "
 "'_get_lr_called_within_step': False, '_last_lr': [0.0001]},self.scaler:{})")
2024-11-14:14:19:04 [INFO    ] [trainer_cls.py:1800] one epoch training part done, use time = 397.7494869232178 s
2024-11-14:14:19:52 [INFO    ] [trainer_cls.py:65] {'batch': 390,
 'bd_test_loss_avg_over_batch': 0.13246962325778647,
 'clean_test_loss_avg_over_batch': 0.16253282756933682,
 'epoch': 0,
 'test_acc': 0.9539,
 'test_asr': 0.9545555555555556,
 'test_ra': 0.043555555555555556,
 'train_acc': 0.8893629807692308,
 'train_acc_clean_only': 0.9264394934229562,
 'train_asr_bd_only': 0.5556000801442597,
 'train_epoch_loss_avg_over_batch': 0.3758521529344412,
 'train_ra_bd_only': 0.5141254257663794}
2024-11-14:14:19:52 [DEBUG   ] [pyplot.py:414] Loaded backend agg version v2.2.
2024-11-14:14:19:52 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-14:14:19:53 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-14:14:26:22 [INFO    ] [trainer_cls.py:1800] one epoch training part done, use time = 389.34853863716125 s
2024-11-14:14:27:11 [INFO    ] [trainer_cls.py:65] {'batch': 390,
 'bd_test_loss_avg_over_batch': 0.2268979432927051,
 'clean_test_loss_avg_over_batch': 0.14170664251793788,
 'epoch': 1,
 'test_acc': 0.9598,
 'test_asr': 0.9287777777777778,
 'test_ra': 0.06955555555555555,
 'train_acc': 0.9293469551282051,
 'train_acc_clean_only': 0.9650344981081682,
 'train_asr_bd_only': 0.6080160320641282,
 'train_epoch_loss_avg_over_batch': 0.24689167401729487,
 'train_ra_bd_only': 0.4725450901803607}
2024-11-14:14:27:11 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-14:14:27:11 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-14:14:33:41 [INFO    ] [trainer_cls.py:1800] one epoch training part done, use time = 389.6884226799011 s
2024-11-14:14:34:29 [INFO    ] [trainer_cls.py:65] {'batch': 390,
 'bd_test_loss_avg_over_batch': 0.2410390358155882,
 'clean_test_loss_avg_over_batch': 0.1584502006350439,
 'epoch': 2,
 'test_acc': 0.9509,
 'test_asr': 0.9373333333333334,
 'test_ra': 0.060444444444444446,
 'train_acc': 0.9396434294871795,
 'train_acc_clean_only': 0.9746260683760684,
 'train_asr_bd_only': 0.6247996794871795,
 'train_epoch_loss_avg_over_batch': 0.2106132295078192,
 'train_ra_bd_only': 0.4609375}
2024-11-14:14:34:29 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-14:14:34:30 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-14:14:40:59 [INFO    ] [trainer_cls.py:1800] one epoch training part done, use time = 389.6966600418091 s
2024-11-14:14:41:48 [INFO    ] [trainer_cls.py:65] {'batch': 390,
 'bd_test_loss_avg_over_batch': 0.3068472810194526,
 'clean_test_loss_avg_over_batch': 0.1271525834793154,
 'epoch': 3,
 'test_acc': 0.9606,
 'test_asr': 0.9001111111111111,
 'test_ra': 0.0961111111111111,
 'train_acc': 0.9420072115384616,
 'train_acc_clean_only': 0.9781452384661607,
 'train_asr_bd_only': 0.616402646881893,
 'train_epoch_loss_avg_over_batch': 0.19645383497461294,
 'train_ra_bd_only': 0.4682173651493884}
2024-11-14:14:41:48 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-14:14:41:48 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-14:14:52:32 [INFO    ] [trainer_cls.py:1800] one epoch training part done, use time = 643.9553937911987 s
2024-11-14:14:54:08 [INFO    ] [trainer_cls.py:65] {'batch': 390,
 'bd_test_loss_avg_over_batch': 0.11194647729239414,
 'clean_test_loss_avg_over_batch': 0.13802512317801577,
 'epoch': 4,
 'test_acc': 0.9576,
 'test_asr': 0.9522222222222222,
 'test_ra': 0.04688888888888889,
 'train_acc': 0.9459334935897435,
 'train_acc_clean_only': 0.9817926859127029,
 'train_asr_bd_only': 0.6232725816142599,
 'train_epoch_loss_avg_over_batch': 0.1833980908951698,
 'train_ra_bd_only': 0.4620468656118566}
2024-11-14:14:54:08 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-14:14:54:08 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-14:15:07:48 [INFO    ] [trainer_cls.py:1800] one epoch training part done, use time = 820.5119597911835 s
2024-11-14:15:09:25 [INFO    ] [trainer_cls.py:65] {'batch': 390,
 'bd_test_loss_avg_over_batch': 0.31639038907809997,
 'clean_test_loss_avg_over_batch': 0.15155657022436964,
 'epoch': 5,
 'test_acc': 0.9537,
 'test_asr': 0.9013333333333333,
 'test_ra': 0.095,
 'train_acc': 0.9488782051282051,
 'train_acc_clean_only': 0.9843760432663418,
 'train_asr_bd_only': 0.6291842052515534,
 'train_epoch_loss_avg_over_batch': 0.17600002170373233,
 'train_ra_bd_only': 0.4546001202645821}
2024-11-14:15:09:25 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-14:15:09:26 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-14:15:21:08 [INFO    ] [trainer_cls.py:1800] one epoch training part done, use time = 702.8997259140015 s
2024-11-14:15:22:44 [INFO    ] [trainer_cls.py:65] {'batch': 390,
 'bd_test_loss_avg_over_batch': 0.22318377797032746,
 'clean_test_loss_avg_over_batch': 0.14723880032572564,
 'epoch': 6,
 'test_acc': 0.9611,
 'test_asr': 0.9291111111111111,
 'test_ra': 0.06922222222222223,
 'train_acc': 0.9524639423076923,
 'train_acc_clean_only': 0.9872234340916173,
 'train_asr_bd_only': 0.6397677212655186,
 'train_epoch_loss_avg_over_batch': 0.16177177604001303,
 'train_ra_bd_only': 0.4465358430116139}
2024-11-14:15:22:45 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-14:15:22:45 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-14:15:36:23 [INFO    ] [trainer_cls.py:1800] one epoch training part done, use time = 818.3327658176422 s
2024-11-14:15:38:00 [INFO    ] [trainer_cls.py:65] {'batch': 390,
 'bd_test_loss_avg_over_batch': 0.1685938881841344,
 'clean_test_loss_avg_over_batch': 0.14245076270043094,
 'epoch': 7,
 'test_acc': 0.96,
 'test_asr': 0.9476666666666667,
 'test_ra': 0.050888888888888886,
 'train_acc': 0.9504407051282051,
 'train_acc_clean_only': 0.9861108019676363,
 'train_asr_bd_only': 0.6294812737832967,
 'train_epoch_loss_avg_over_batch': 0.16458373649571187,
 'train_ra_bd_only': 0.453034247947126}
2024-11-14:15:38:00 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-14:15:38:00 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-14:15:48:00 [INFO    ] [trainer_cls.py:1800] one epoch training part done, use time = 599.7392799854279 s
2024-11-14:15:48:48 [INFO    ] [trainer_cls.py:65] {'batch': 390,
 'bd_test_loss_avg_over_batch': 0.11996997913844148,
 'clean_test_loss_avg_over_batch': 0.15248525366658652,
 'epoch': 8,
 'test_acc': 0.9593,
 'test_asr': 0.9487777777777778,
 'test_ra': 0.050666666666666665,
 'train_acc': 0.9544871794871795,
 'train_acc_clean_only': 0.9884924432969039,
 'train_asr_bd_only': 0.6485079110755058,
 'train_epoch_loss_avg_over_batch': 0.15144849872359864,
 'train_ra_bd_only': 0.4364109753655117}
2024-11-14:15:48:49 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-14:15:48:49 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-14:15:55:18 [INFO    ] [trainer_cls.py:1800] one epoch training part done, use time = 389.7241370677948 s
2024-11-14:15:56:07 [INFO    ] [trainer_cls.py:65] {'batch': 390,
 'bd_test_loss_avg_over_batch': 0.18632069660324446,
 'clean_test_loss_avg_over_batch': 0.1593482556128049,
 'epoch': 9,
 'test_acc': 0.9585,
 'test_asr': 0.9344444444444444,
 'test_ra': 0.06355555555555556,
 'train_acc': 0.9547275641025641,
 'train_acc_clean_only': 0.9875358899597142,
 'train_asr_bd_only': 0.6593868964135444,
 'train_epoch_loss_avg_over_batch': 0.14939193786718907,
 'train_ra_bd_only': 0.424764576237227}
2024-11-14:15:56:07 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-14:15:56:07 [DEBUG   ] [trainer_cls.py:88] return df with np.nan and None converted by str()
2024-11-14:15:56:07 [INFO    ] [save_load_attack.py:141] saving...
2024-11-14:15:56:07 [DEBUG   ] [save_load_attack.py:142] location : ./record/badnet_0_1_ViT/attack_result.pt
2024-11-14:15:56:08 [INFO    ] [save_load_attack.py:149] Saved, folder path: ./record/badnet_0_1_ViT
