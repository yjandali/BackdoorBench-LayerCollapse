2024-11-18:12:40:28 [INFO    ] [fp.py:202] {'acc_ratio': 0.1,
 'amp': True,
 'batch_size': 256,
 'client_optimizer': 'sgd',
 'dataset': 'cifar10',
 'dataset_path': 'data//cifar10',
 'defense_save_path': 'record/sig_0_1_RN18FR/defense/fp',
 'device': 'cuda:0',
 'epochs': 20,
 'frequency_save': 0,
 'img_size': (32, 32, 3),
 'index': None,
 'input_channel': 3,
 'input_height': 32,
 'input_width': 32,
 'lr': 0.01,
 'lr_scheduler': 'CosineAnnealingLR',
 'model': 'preactresnet18',
 'non_blocking': True,
 'num_classes': 10,
 'num_workers': 4,
 'once_prune_ratio': 0.01,
 'pin_memory': True,
 'poison_rate': 0.1,
 'prefetch': False,
 'random_seed': 0,
 'ratio': 0.05,
 'result_file': 'sig_0_1_RN18FR',
 'sgd_momentum': 0.9,
 'target_label': 0,
 'target_type': 'all2one',
 'terminal_info': ['./defense/fp.py',
                   '--result_file',
                   'sig_0_1_RN18FR',
                   '--yaml_path',
                   './config/defense/fp/cifar10.yaml',
                   '--dataset',
                   'cifar10',
                   '--epochs',
                   '20',
                   '--ratio',
                   '0.05',
                   '--device',
                   'cuda:0',
                   '--model',
                   'preactresnet18'],
 'trigger_type': 'squareTrigger',
 'wd': 0.0005,
 'yaml_path': './config/defense/fp/cifar10.yaml'}
2024-11-18:12:40:28 [DEBUG   ] [fp.py:204] Only INFO or above level log will show in cmd. DEBUG level log only will show in log file.
2024-11-18:12:40:28 [DEBUG   ] [fp.py:208] {'git hash': None,
 'last 3 log': 'commit f2ca5f8f4b58e07a407dd65ca217f11673aba63d\n'
               'Author: soheilzi <soheil.zibakhsh@gmail.com>\n'
               'Date:   Tue Nov 12 09:46:15 2024 -0800\n'
               '\n'
               '    added the adverserial test, added the trojan tests with '
               'MG\n'
               '\n'
               'commit afd704e7564791ddc0ae120c7d2e1581bd3a4f80\n'
               'Author: Yaman <yamanjandali@gmail.com>\n'
               'Date:   Fri Nov 8 16:15:34 2024 -0800\n'
               '\n'
               '    removed added files\n'
               '\n'
               'commit 9bc0c704e4be5beff4562e38a15f0b4e070bb433\n'
               'Author: Yaman <yamanjandali@gmail.com>\n'
               'Date:   Tue Nov 5 10:24:03 2024 -0800\n'
               '\n'
               '    updated train_settings_generate.py file',
 'status': 'On branch main\n'
           "Your branch is up to date with 'origin/main'.\n"
           '\n'
           'Changes not staged for commit:\n'
           '  (use "git add <file>..." to update what will be committed)\n'
           '  (use "git restore <file>..." to discard changes in working '
           'directory)\n'
           '\tmodified:   attack/trojannn.py\n'
           '\tmodified:   config/attack/badnet/default.yaml\n'
           '\tmodified:   config/attack/trojannn/vit_b_16.yaml\n'
           '\tmodified:   config/attack/wanet/default.yaml\n'
           '\tmodified:   config/defense/ft-sam/cifar10.yaml\n'
           '\tmodified:   testing_adverserial/adverserial_test.ipynb\n'
           '\n'
           'Untracked files:\n'
           '  (use "git add <file>..." to include in what will be committed)\n'
           '\tattackOut.txt\n'
           '\tconfig-vit/\n'
           '\toutRN18.txt\n'
           '\toutRN18Others.txt\n'
           '\toutTimes.txt\n'
           '\toutputPane.txt\n'
           '\toutputPaneWaNet.txt\n'
           '\trecord/badnet_0_1_RN18/\n'
           '\trecord/badnet_0_1_ViT/\n'
           '\trecord/badnet_0_1_ViT2/\n'
           '\trecord/blended_0_1_RN18/\n'
           '\trecord/blended_0_1_ViT/\n'
           '\trecord/inputaware_0_1_RN18FR/\n'
           '\trecord/inputaware_0_1_ViT/\n'
           '\trecord/sig_0_1_RN18FR/\n'
           '\trecord/sig_0_1_RN18Old/\n'
           '\trecord/sig_0_1_ViT/\n'
           '\trecord/sig_0_1_ViTOG/\n'
           '\trecord/trojannn_0_1_RN18/\n'
           '\trecord/trojannn_0_1_ViT2/\n'
           '\trecord/wanet_0_1_RN18/\n'
           '\trecord/wanet_0_1_ViT/\n'
           '\tresource/clean_model/\n'
           '\trun_attacks.sh\n'
           '\trun_attacks2.sh\n'
           '\trun_attacksRN18.sh\n'
           '\trun_attacks_ViT.sh\n'
           '\trun_defenses.sh\n'
           '\trun_defensesRN18.sh\n'
           '\trun_defensesRN18_all.sh\n'
           '\trun_defenses_w_times.sh\n'
           '\ttesting_adverserial/adverserial_test2.ipynb\n'
           '\n'
           'no changes added to commit (use "git add" and/or "git commit -a")'}
2024-11-18:12:40:28 [INFO    ] [save_load_attack.py:210] key match for attack_result, processing...
2024-11-18:12:40:28 [WARNING ] [save_load_attack.py:221] save_path MUST have 'record' in its abspath, and data_path in attack result MUST have 'data' in its path
2024-11-18:12:40:30 [INFO    ] [bd_dataset_v2.py:133] save file format is .png
2024-11-18:12:40:30 [INFO    ] [bd_dataset_v2.py:133] save file format is .png
2024-11-18:12:40:30 [INFO    ] [bd_dataset_v2.py:133] save file format is .png
2024-11-18:12:40:30 [INFO    ] [bd_dataset_v2.py:133] save file format is .png
2024-11-18:12:40:30 [DEBUG   ] [model_trainer_generate.py:59] image_size ONLY apply for vit!!!
If you use vit make sure you set the image size!
2024-11-18:12:40:30 [DEBUG   ] [model_trainer_generate.py:65] Make sure you want PreActResNet18, which is NOT resnet18.
2024-11-18:12:40:30 [DEBUG   ] [model_trainer_generate.py:59] image_size ONLY apply for vit!!!
If you use vit make sure you set the image size!
2024-11-18:12:40:30 [DEBUG   ] [model_trainer_generate.py:65] Make sure you want PreActResNet18, which is NOT resnet18.
2024-11-18:12:40:31 [INFO    ] [bd_dataset_v2.py:133] save file format is .png
2024-11-18:12:40:31 [INFO    ] [fp.py:247] get ran_idx for subset clean train dataset, (len=2500), ran_idx:[25247, 49673, 27562, 2653, 16968, 33506, 31845, 26537, 19877, 31234, 23465, 38232, 14315, 33075, 9127, 18470, 9158, 49532, 6214, 40525, 16417, 34902, 46214, 39446, 9631, 20325, 6472, 47830, 4832, 44825, 21639, 30942, 36687, 6599, 23186, 28453, 20722, 40035, 41970, 13400, 36210, 31261, 29012, 34167, 17071, 4081, 35959, 920, 6112, 47166, 26137, 46547, 43788, 40977, 74, 40101, 32347, 21832, 15984, 47859, 21312, 46113, 4127, 12521, 37192, 14529, 15637, 9338, 35585, 29358, 5977, 5272, 20975, 33288, 32065, 7147, 19755, 36127, 19076, 46305, 8179, 35877, 21807, 35408, 13317, 39530, 35863, 38510, 18851, 29162, 6005, 39078, 25224, 20777, 37725, 15866, 19027, 12050, 12411, 12237, 2160, 40158, 43034, 17043, 31229, 4527, 5886, 44480, 49650, 8534, 9800, 2532, 5259, 45830, 35428, 44793, 25643, 46221, 34378, 18063, 34196, 15433, 14103, 44530, 38653, 27487, 37990, 18036, 29528, 32286, 43269, 42021, 45889, 23420, 5398, 21254, 40159, 7559, 31879, 38474, 41297, 21972, 12476, 15927, 1062, 47938, 17762, 7676, 46224, 14448, 24383, 11172, 21793, 27926, 4075, 6593, 9591, 45722, 14337, 2964, 37608, 41563, 35009, 39463, 44603, 4849, 1749, 8155, 41615, 12354, 39736, 37745, 7844, 25638, 5998, 24257, 7605, 2384, 39682, 1417, 12752, 12122, 47062, 8119, 31407, 13800, 47654, 4003, 44521, 1493, 35667, 27893, 40671, 6651, 17034, 4587, 14472, 4716, 42396, 19730, 22956, 28578, 11817, 4000, 33006, 30613, 2580, 39091, 6613, 25642, 13064, 17048, 23498, 47946, 30816, 37340, 11103, 45724, 44082, 13330, 3804, 44315, 10368, 10613, 22433, 34699, 16429, 7681, 39111, 28987, 43621, 11456, 865, 30908, 44648, 26863, 37297, 33331, 20410, 42528, 23406, 25470, 43097, 16445, 10054, 36739, 45273, 815, 30012, 48599, 5182, 22014, 48432, 2994, 35672, 18407, 8836, 15737, 49949, 31577, 23083, 39985, 18866, 44132, 23540, 38684, 41533, 40702, 8673, 46898, 20335, 25429, 49052, 27159, 42652, 5290, 99, 38966, 12603, 45782, 21915, 10490, 15690, 14620, 41772, 29368, 24815, 46553, 44156, 37234, 27158, 2067, 26362, 45995, 37189, 27408, 43397, 46465, 3065, 10857, 29186, 4186, 16988, 45974, 10334, 29252, 34575, 31933, 36792, 39582, 49511, 4, 2550, 32412, 21361, 20451, 30598, 3267, 27206, 12320, 35950, 41490, 5470, 47549, 8553, 965, 26333, 44467, 27360, 20720, 222, 13993, 936, 47010, 49463, 154, 44286, 34625, 40112, 6408, 12481, 7792, 39869, 42550, 13009, 19819, 18348, 45124, 11942, 6565, 31169, 25997, 41132, 5331, 1431, 18003, 29686, 7587, 16809, 8743, 42832, 34135, 42649, 42266, 22744, 7543, 10121, 18245, 1217, 2772, 2664, 13483, 44629, 17017, 36592, 20625, 24044, 2752, 49095, 45962, 39819, 42949, 32406, 46685, 42214, 30059, 41952, 28537, 24408, 35253, 11684, 13621, 24613, 38477, 19073, 583, 9073, 9897, 17784, 21850, 22119, 24064, 47087, 6141, 22167, 40667, 2337, 2700, 17669, 10738, 9792, 38237, 18974, 23652, 25873, 35945, 8496, 19228, 7529, 31330, 47875, 15709, 3162, 20177, 11769, 34278, 47753, 4644, 19835, 26422, 21529, 19610, 27179, 7120, 6514, 36754, 31534, 31064, 22090, 22521, 8147, 31397, 7602, 45848, 32619, 27953, 2478, 19785, 21959, 48152, 45030, 10201, 10915, 41074, 36994, 41869, 5696, 4314, 5548, 12978, 49143, 14487, 4007, 25219, 514, 6427, 25808, 36469, 34013, 18993, 29395, 32022, 38331, 46819, 44518, 14237, 27724, 5482, 24138, 14426, 17099, 38353, 10917, 28260, 12579, 23495, 7537, 4184, 46006, 1810, 34459, 29596, 49311, 44362, 13217, 32577, 26080, 16808, 13581, 42008, 2759, 14148, 40856, 6857, 12974, 30042, 24774, 23700, 35808, 9917, 6864, 39075, 31975, 9725, 36956, 26601, 41835, 44559, 27737, 34159, 32466, 44519, 21132, 32665, 32679, 41619, 43913, 13237, 35573, 39961, 636, 22296, 46241, 48957, 20857, 21091, 2324, 34413, 9723, 16835, 39491, 10217, 24838, 38204, 19292, 47063, 46292, 30830, 4348, 5547, 33851, 2583, 14751, 8552, 2662, 19690, 1001, 49735, 29398, 21665, 10530, 9753, 42997, 30194, 24334, 33095, 25049, 34721, 32927, 2203, 37609, 5940, 44470, 33947, 49666, 39330, 5004, 48953, 27942, 49454, 13507, 18983, 35089, 39230, 27383, 31602, 25465, 39808, 38429, 15307, 1342, 43056, 15, 48545, 11925, 19820, 33217, 37372, 16676, 21802, 4300, 32342, 17170, 19844, 26743, 25176, 25144, 4080, 10734, 42007, 8344, 15659, 18814, 47805, 21890, 3639, 2354, 31544, 27385, 9234, 32232, 39450, 47001, 5349, 44141, 45789, 9920, 23119, 26944, 2305, 40093, 30558, 25341, 30073, 3082, 6650, 30860, 1325, 2127, 39210, 40461, 8696, 41285, 21227, 6900, 45880, 35988, 42532, 22719, 12777, 25127, 32133, 7274, 3942, 39984, 45928, 30617, 40260, 41439, 22142, 42629, 44730, 46767, 40765, 19423, 8330, 25404, 19254, 48875, 44630, 7966, 12394, 2502, 25691, 29135, 24351, 49585, 12483, 29849, 23367, 41419, 4937, 2925, 2620, 31861, 16736, 1746, 34082, 43680, 37306, 37473, 14154, 15050, 6126, 41119, 32926, 45777, 34321, 27532, 33233, 20008, 7434, 9547, 27916, 37094, 27659, 5507, 6865, 27239, 4123, 6501, 27208, 10233, 48121, 2012, 29276, 28251, 44985, 27329, 1974, 32546, 21266, 47352, 16553, 5147, 23101, 4609, 7954, 23544, 45336, 1925, 22639, 22798, 11659, 653, 15105, 23973, 4621, 39098, 9390, 13630, 211, 13421, 43189, 44155, 47979, 8073, 49019, 470, 19219, 24191, 45184, 1615, 39639, 15260, 9298, 12254, 29756, 7365, 31240, 22573, 46365, 16922, 8530, 1830, 13639, 23739, 21955, 31022, 19177, 19421, 36254, 41675, 21429, 12061, 38864, 5295, 6722, 34945, 38066, 20169, 10250, 24680, 9628, 8207, 14602, 20702, 33314, 15914, 15509, 49470, 12054, 19074, 24409, 27511, 43463, 3031, 8666, 39400, 1346, 5106, 46017, 4797, 8652, 27540, 19620, 36095, 27312, 48554, 9324, 38736, 27668, 19531, 41744, 23236, 5541, 16256, 29151, 41469, 24199, 41749, 34682, 3791, 24669, 26779, 552, 27343, 47722, 21015, 28920, 13368, 24352, 19222, 5967, 12154, 7118, 18151, 7350, 36580, 39685, 45101, 10084, 46045, 29239, 26134, 12149, 27636, 28292, 11451, 16250, 29717, 22307, 34298, 9343, 23289, 30306, 41387, 41766, 5668, 31672, 49481, 13345, 19315, 120, 45809, 29431, 40549, 30278, 509, 14334, 19566, 7501, 41216, 19736, 35730, 39921, 10238, 27800, 46287, 49240, 30895, 6065, 44445, 32615, 49813, 15228, 35634, 49938, 26562, 18355, 41423, 1416, 7918, 17699, 43810, 2657, 16, 16814, 26111, 34478, 38116, 46528, 25967, 29136, 6686, 48925, 16554, 23188, 18572, 49494, 44076, 12847, 39020, 5587, 2323, 4617, 17202, 20028, 34972, 22275, 7745, 34746, 16321, 10718, 4462, 27186, 18985, 18530, 34067, 8809, 37616, 34279, 41100, 13780, 34824, 6901, 26922, 41588, 35623, 26438, 48590, 18259, 19153, 28990, 24366, 37239, 41209, 9031, 10293, 8080, 45680, 7898, 24997, 26294, 38735, 30667, 9144, 36674, 43794, 19592, 23203, 41426, 30976, 48650, 27204, 14287, 31242, 32037, 45527, 32870, 20856, 32290, 42733, 3946, 29096, 19672, 9359, 48838, 32474, 3434, 40707, 14137, 1674, 23291, 30902, 25622, 662, 34526, 4355, 45016, 5332, 44977, 48624, 43844, 25894, 420, 23676, 2698, 7612, 40689, 245, 17716, 41967, 45854, 19171, 47651, 14856, 9219, 49257, 37542, 18869, 12530, 6911, 28443, 30205, 46946, 25174, 11026, 21672, 27637, 42467, 45054, 28525, 9700, 29313, 46453, 9666, 34351, 20714, 8468, 13688, 12243, 29106, 22883, 25485, 28002, 32240, 25528, 47827, 14428, 12857, 28788, 13386, 38438, 46530, 3263, 25450, 2180, 15337, 41495, 12239, 23829, 3734, 48703, 41816, 44400, 11362, 15274, 40028, 19498, 40141, 5677, 46197, 33562, 49249, 18640, 23138, 26963, 30034, 3535, 41410, 45665, 33824, 43622, 42500, 35860, 48130, 28220, 38073, 29792, 32125, 16695, 46144, 31172, 14117, 22098, 17424, 2767, 2870, 3444, 10673, 22924, 253, 18992, 42901, 467, 9201, 4173, 28032, 44597, 14559, 39887, 25985, 36553, 14481, 29733, 12638, 22249, 39866, 6706, 39738, 5611, 20907, 21163, 35120, 29867, 21308, 16744, 1889, 34209, 2906, 12460, 24163, 5250, 13735, 34374, 22658, 12306, 13213, 16467, 44083, 47777, 48208, 19747, 20462, 33875, 25209, 16688, 31593, 22540, 46693, 15726, 2916, 20041, 36174, 4740, 603, 30207, 32460, 47487, 28717, 3110, 27008, 30180, 28842, 7741, 5610, 5339, 15803, 6470, 10079, 27132, 13989, 28877, 40157, 5055, 27979, 36635, 49468, 25852, 2578, 11821, 16366, 32113, 14421, 8394, 18284, 23075, 20945, 28497, 7031, 36507, 18710, 39982, 35459, 13184, 46600, 19440, 28952, 33687, 39627, 30282, 35138, 41573, 17104, 17861, 15190, 1085, 7781, 40296, 46655, 6481, 11309, 48030, 27175, 16303, 14291, 18648, 48239, 43228, 422, 48622, 35096, 33769, 28067, 3261, 7981, 25211, 42283, 17857, 7749, 48318, 37006, 23521, 15044, 44229, 46959, 46103, 35824, 43293, 18492, 14520, 48488, 4245, 33957, 20153, 44213, 21450, 15309, 24457, 41190, 31474, 18797, 38145, 11231, 8997, 1015, 36249, 33085, 21488, 24050, 38366, 41603, 1657, 8508, 25924, 10174, 11584, 33454, 5010, 8885, 13533, 32554, 37322, 45593, 15421, 48009, 8659, 15315, 49805, 25205, 23164, 39878, 38733, 8686, 41221, 32667, 7078, 40371, 1704, 34500, 39067, 23502, 32060, 29858, 20230, 828, 14422, 36406, 42779, 10684, 43309, 32420, 48324, 31517, 35784, 20574, 46152, 5162, 16984, 9007, 39603, 26335, 46099, 20736, 19118, 25171, 3878, 13674, 2509, 20654, 47609, 48960, 16358, 22489, 28914, 43806, 47565, 43238, 43111, 14805, 17046, 22555, 44012, 10638, 19982, 1112, 23354, 37590, 35357, 3813, 47992, 41316, 9910, 23161, 1440, 32185, 41145, 4018, 1609, 15824, 2946, 14796, 42852, 21408, 4361, 4089, 22605, 43514, 27698, 8903, 14190, 29423, 28522, 9309, 23464, 20444, 11595, 42537, 21549, 47714, 48975, 26780, 25078, 631, 26822, 17284, 34976, 34821, 48210, 45000, 46198, 30320, 49747, 2748, 37010, 8034, 26799, 25578, 11227, 203, 32804, 9058, 40753, 43383, 33681, 48000, 45849, 9710, 5219, 21630, 15556, 11552, 16173, 11065, 48680, 44804, 11030, 47041, 5143, 27995, 39182, 6793, 40665, 41191, 29983, 46537, 9835, 40300, 2624, 16546, 22298, 48366, 48019, 24675, 1786, 41010, 2380, 32528, 5873, 23485, 19184, 44016, 9883, 30023, 15476, 33255, 23318, 10635, 48201, 49347, 26523, 22127, 17684, 32264, 25728, 968, 20366, 34756, 18889, 36074, 30730, 2289, 34851, 37388, 36182, 17199, 45012, 2510, 29879, 25890, 47276, 7865, 26462, 22714, 32506, 3352, 1355, 17894, 48493, 2246, 16640, 44612, 44590, 38142, 46052, 18990, 44964, 49943, 13572, 49977, 34686, 33833, 22300, 25301, 16425, 13695, 7601, 37095, 21590, 15902, 38413, 44162, 47191, 34916, 44651, 23157, 10652, 10030, 21670, 48981, 595, 38334, 3359, 37019, 10234, 22582, 23802, 19083, 41006, 19229, 21168, 32431, 26454, 39367, 28246, 11143, 66, 9224, 37263, 2857, 28959, 8247, 22370, 610, 47292, 31484, 43529, 43439, 16882, 48973, 40121, 12298, 4603, 35971, 27779, 18265, 11392, 34703, 11131, 4147, 43179, 41903, 10315, 7212, 33025, 41427, 35613, 39652, 28484, 17416, 20407, 18675, 893, 28095, 47049, 18378, 16920, 35249, 34554, 36343, 20835, 22430, 12451, 46240, 28291, 9286, 388, 49155, 33511, 10179, 43327, 45966, 36915, 25175, 23654, 30417, 2383, 36804, 26977, 41724, 40247, 49822, 14962, 1028, 23738, 34674, 10388, 44581, 12747, 41347, 23230, 41144, 45881, 32570, 1254, 47901, 48185, 16331, 37457, 15864, 17987, 12133, 49681, 27523, 37561, 29371, 15514, 48761, 46780, 29468, 33351, 46202, 6581, 12339, 10779, 28868, 4274, 27967, 41598, 25869, 17816, 16560, 28653, 49658, 23341, 39956, 21480, 5939, 20120, 32277, 718, 49972, 16420, 13289, 49961, 26076, 25337, 28548, 41639, 41002, 44110, 25510, 45685, 2517, 38187, 30494, 23237, 37276, 8310, 36989, 46562, 18241, 21503, 1592, 26089, 31046, 34189, 8869, 2725, 5340, 37088, 22769, 23659, 294, 4546, 12502, 47008, 7262, 44000, 35430, 30874, 2825, 20613, 1663, 20630, 25732, 8209, 41652, 18027, 26634, 43967, 9314, 39037, 9665, 26489, 20060, 33521, 3922, 10676, 8217, 8778, 31515, 46223, 42067, 46941, 47420, 3061, 47828, 34053, 2848, 36368, 45297, 48768, 45699, 41367, 25379, 11810, 22590, 38396, 5426, 36686, 11431, 17405, 13212, 17102, 21491, 45901, 46443, 16638, 16989, 33910, 29915, 10171, 49589, 29414, 36223, 10015, 2529, 41454, 38371, 11597, 42044, 33569, 2214, 49656, 4695, 12641, 42493, 29920, 15644, 34227, 10445, 46499, 21867, 42939, 8839, 31226, 36432, 3746, 35615, 5401, 33926, 22503, 161, 5242, 6814, 28031, 39815, 23089, 37373, 29594, 22007, 24776, 33580, 23727, 41718, 7788, 8920, 20767, 1489, 11966, 48087, 8198, 1258, 22143, 39811, 12670, 2892, 27121, 42296, 4065, 45799, 20398, 25527, 3423, 39351, 46619, 11020, 23454, 5073, 26753, 3539, 28882, 23263, 39593, 40641, 49575, 16765, 44061, 20299, 36879, 29729, 27015, 11840, 2011, 29735, 17311, 12484, 25405, 4200, 23436, 6311, 8084, 1716, 22989, 1398, 11605, 26461, 45257, 42823, 894, 21155, 36310, 48890, 45537, 32507, 31230, 3389, 35101, 26341, 17186, 1821, 33807, 6272, 5248, 21863, 23497, 6454, 30892, 2167, 10110, 33855, 40994, 2411, 47, 24686, 22130, 10280, 35932, 45611, 9626, 10522, 11443, 10418, 41950, 44553, 15897, 40941, 21513, 1562, 31648, 41014, 44462, 26090, 2894, 14839, 15747, 41659, 18453, 21533, 11142, 15609, 23074, 14813, 10723, 27574, 30336, 23808, 37052, 9043, 25330, 37022, 882, 10626, 38250, 369, 45019, 25552, 47085, 11269, 9756, 1278, 1649, 21189, 33429, 242, 3093, 7333, 37552, 40073, 9679, 10036, 44144, 24895, 1732, 27442, 28590, 37227, 21818, 46609, 9032, 23856, 33439, 14199, 34953, 26239, 4787, 8506, 26722, 37100, 43167, 22976, 6327, 28281, 28576, 16098, 30876, 25018, 14747, 25876, 15732, 42288, 26021, 38101, 4523, 16539, 18079, 34510, 35542, 1423, 39585, 40082, 31100, 15533, 18106, 2641, 40040, 21074, 25609, 41032, 6990, 35027, 3192, 9450, 46758, 25718, 1756, 27593, 47906, 25762, 28374, 6869, 46739, 30191, 39595, 30276, 10576, 11115, 22314, 31087, 26941, 10420, 38679, 18593, 49927, 33001, 7373, 24135, 22637, 9351, 41196, 23437, 30977, 41305, 33994, 49376, 3532, 12824, 16884, 11593, 47412, 38252, 21277, 19401, 24911, 41577, 2717, 19078, 36138, 28259, 2287, 44710, 26905, 17633, 24586, 47702, 13642, 22732, 8792, 8660, 7228, 40182, 23393, 10863, 2046, 28218, 37794, 26109, 30377, 4991, 46581, 46336, 44618, 5100, 27880, 35711, 47592, 36301, 9063, 11090, 10024, 13596, 10778, 14958, 1947, 34426, 8883, 32312, 23394, 40851, 48226, 18876, 46953, 21965, 44839, 7764, 26795, 17155, 10375, 22444, 41155, 21744, 34939, 45557, 9475, 24650, 48483, 48744, 36403, 20004, 15370, 24809, 22709, 25576, 30885, 33524, 20064, 26876, 26627, 6403, 44789, 10093, 9676, 322, 38239, 39024, 41553, 46167, 33889, 7000, 45668, 42425, 45748, 13429, 39045, 42224, 39526, 33649, 7286, 17477, 47967, 40259, 11051, 24632, 5595, 2360, 687, 7562, 23734, 47347, 31503, 20863, 7087, 44300, 29663, 24188, 38289, 45657, 43682, 31885, 14989, 10423, 36807, 36151, 5107, 33291, 11010, 1689, 42153, 10932, 33891, 26797, 39862, 43296, 13636, 28716, 46408, 26543, 17309, 1387, 38498, 8799, 25442, 11228, 28898, 37024, 3516, 24579, 5688, 42208, 38549, 26554, 21923, 15276, 33213, 29853, 2562, 31453, 40632, 6671, 17608, 33259, 32130, 36096, 42269, 25827, 17387, 11863, 15058, 35455, 23876, 10455, 19821, 39902, 9413, 29944, 4511, 4488, 31333, 25771, 37101, 26868, 36447, 6045, 17401, 31607, 7266, 19444, 9245, 23557, 6170, 9085, 43151, 3716, 43617, 8965, 38436, 36616, 462, 2166, 26499, 36587, 45861, 49501, 39434, 32135, 46800, 45247, 7015, 30996, 36670, 22759, 22481, 6391, 44940, 337, 15839, 14853, 20414, 17986, 14720, 587, 32481, 23256, 33356, 22339, 6007, 5079, 19973, 37595, 27675, 14827, 48428, 24084, 24979, 49688, 9533, 15180, 18867, 13062, 48653, 31530, 43254, 23538, 18540, 25188, 40135, 8478, 7828, 26292, 23269, 32784, 30865, 14984, 43003, 46484, 24506, 41429, 23511, 28306, 18180, 23541, 26271, 46816, 18553, 31439, 19094, 7905, 29228, 10109, 22545, 15960, 48714, 12251, 22157, 32722, 14987, 7207, 44636, 25159, 25474, 30462, 33654, 30262, 37086, 40507, 14460, 44278, 26167, 32913, 20395, 31894, 15247, 20612, 33942, 44821, 107, 6022, 30917, 20784, 25838, 14901, 28269, 3186, 37708, 2650, 26640, 17266, 13126, 47541, 21417, 11702, 7412, 11850, 45786, 23865, 1852, 15317, 2863, 530, 35034, 295, 8497, 7634, 39626, 39706, 13065, 5345, 48566, 30545, 12956, 97, 34093, 40723, 27210, 4376, 35188, 11608, 15355, 14873, 27225, 25030, 31108, 24, 28561, 13769, 24985, 2699, 40354, 17650, 1871, 38195, 22745, 46127, 24082, 22106, 44379, 29747, 41992, 8806, 39053, 33884, 6032, 16496, 6767, 46847, 6782, 17882, 1581, 45373, 9299, 40685, 43178, 8906, 24832, 13571, 37563, 43255, 20941, 13215, 27601, 33293, 32792, 7886, 36673, 6916, 45424, 31104, 8162, 33357, 29339, 30788, 11709, 29812, 35898, 22270, 8446, 27277, 16674, 24722, 37026, 33124, 21993, 15306, 29740, 16283, 23006, 31493, 26888, 1567, 29294, 47409, 393, 36206, 26532, 29234, 14678, 28146, 15798, 16594, 31275, 31135, 9240, 14959, 28895, 18580, 23591, 42814, 31862, 39285, 9752, 34234, 44859, 5738, 12294, 19654, 33934, 41346, 44116, 8044, 3866, 10165, 22466, 2404, 21917, 40749, 10509, 30710, 44419, 12296, 26966, 32512, 12586, 10978, 25617, 3088, 22214, 49796, 44701, 34138, 12297, 47443, 21499, 12006, 34026, 35571, 46699, 38960, 28445, 9971, 41519, 45136, 40480, 32338, 37403, 13983, 39194, 28926, 2156, 15923, 31965, 39581, 20819, 36426, 47913, 12870, 33, 2853, 15915, 29046, 44184, 39975, 14679, 43308, 44860, 7146, 49626, 33798, 27887, 42318, 41554, 18769, 44762, 22160, 32337, 44921, 12592, 10696, 24421, 36527, 23365, 47022, 28714, 25612, 28763, 43465, 20809, 30708, 4412]
2024-11-18:12:40:31 [INFO    ] [fp.py:300] hook on linear
2024-11-18:12:40:31 [INFO    ] [fp.py:303] Forwarding all the training dataset:
2024-11-18:12:40:33 [INFO    ] [fp.py:316] get seq_sort, (len=512), seq_sort:tensor([315,  43, 468, 480, 268,  34,  54, 127, 242,  48, 259,  58, 138, 208,
        477, 422,  15, 267, 485, 142, 241,  12, 145, 475,   4,   8, 300, 362,
        358, 371, 153, 155, 172, 463, 359, 207,  70, 248, 294, 508,  84, 354,
        111, 114, 428, 189, 285, 511, 146, 461, 318,  27, 201, 486, 385, 293,
        471, 119, 223, 157, 500, 234, 339, 279, 469, 411, 140, 433, 251,   3,
         38,  85, 372,  66, 243, 144, 288,  76,  23, 316, 417, 351,   6, 283,
         69, 313, 503, 369, 379, 271, 435, 383, 181, 112, 178, 330, 396,  62,
        177, 376, 221, 254,  49, 170,  13, 120, 182, 214, 191, 389, 455,   7,
        311,  19, 364, 308, 331, 406, 319, 444, 126, 470, 246,  42, 244,   1,
         89,  67, 301, 438,   5, 116, 130, 381,  55, 432, 273, 431,   9, 133,
        329,  75, 442, 395, 418, 445, 118,  46,  14, 113, 448, 504,  94, 252,
        280, 193, 226,  44, 149, 378, 419, 456, 460,  17, 454, 342, 482, 402,
         39, 373, 494, 430,   0, 393, 382, 446, 202, 451, 199,  53,  24,  83,
        197, 347, 505, 481,  82, 270, 415, 420, 307, 487, 336, 370, 317, 211,
        478, 174, 239,  78, 394, 164,  10, 165, 253, 123,  35, 125, 128, 344,
        292, 132,  33, 507, 465, 236, 109, 121, 135, 298, 302, 490, 407, 496,
        231, 159, 408,  37, 299, 447, 295, 409, 245, 491, 426,  65, 278, 464,
        332, 492, 429, 106, 421, 502, 363, 238, 498, 314, 437, 458,  98, 219,
        466, 151, 203, 204, 255,  93,  86,  28,  79, 216, 303, 274, 497,  95,
        467, 462, 399, 397, 476,  72,  64, 215,  57, 380, 152, 166, 304, 263,
        250, 272, 230, 110, 297, 180,  77, 350, 484, 173, 343, 224,  41, 312,
        449, 328, 222,  52, 260, 506, 209,  21,  97, 147, 390,  18, 269, 327,
        194, 122, 258, 235,  51,  60, 136,  96,  16, 501, 499,  80, 410, 210,
        196, 453, 160, 489, 323, 391, 131, 229, 284,  11, 353, 388,  71, 225,
         74, 107, 183, 227, 264, 176,  20, 357, 387, 198, 436,  61, 349,  31,
        434, 188, 337, 509, 335, 425, 200, 305, 340,  91,  36, 473, 232,  25,
        141,  45, 192, 134, 423, 291, 108, 247, 186, 257, 168,  59, 322, 266,
        324, 286, 139, 321, 163, 184, 386, 287, 495, 187, 360, 361, 296, 115,
        416, 190,  63, 206, 158, 102, 150, 233, 161, 256, 405,   2, 483, 338,
        228, 101, 356, 154, 237, 404, 276,  73,  81, 403,  32, 281, 333, 414,
        249, 220, 275, 441, 457, 348, 474, 262, 104, 185, 368, 365,  30, 162,
         22, 459,  99, 156, 143,  90, 398, 346, 452,  87, 488, 424, 212,  47,
        171, 117, 277,  68, 334, 366, 124, 412, 367, 195, 105, 375, 167, 290,
        175, 413, 240, 261, 400, 213, 384,  92, 440, 309, 326, 282, 310, 148,
        392, 137,  29, 289, 205, 355, 443, 374, 320,  26, 306, 100, 325, 472,
        439,  50, 401, 479,  40, 169, 352, 129, 377, 341, 179, 427,  56, 450,
        510, 265, 345,  88, 217, 218, 493, 103], device='cuda:0')
2024-11-18:12:40:33 [INFO    ] [fp.py:323] Find the first child be nn.Linear, name:
2024-11-18:12:40:36 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 0,
 'test_acc': 0.8252,
 'test_asr': 0.9748888888888889,
 'test_ra': 0.023666666666666666}
2024-11-18:12:40:40 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 6,
 'test_acc': 0.8253,
 'test_asr': 0.9764444444444444,
 'test_ra': 0.022555555555555554}
2024-11-18:12:40:44 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 12,
 'test_acc': 0.8247,
 'test_asr': 0.9777777777777777,
 'test_ra': 0.021222222222222222}
2024-11-18:12:40:47 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 18,
 'test_acc': 0.825,
 'test_asr': 0.9792222222222222,
 'test_ra': 0.019777777777777776}
2024-11-18:12:40:51 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 24,
 'test_acc': 0.8255,
 'test_asr': 0.9792222222222222,
 'test_ra': 0.019777777777777776}
2024-11-18:12:40:55 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 30,
 'test_acc': 0.8254,
 'test_asr': 0.9778888888888889,
 'test_ra': 0.021}
2024-11-18:12:40:58 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 36,
 'test_acc': 0.8251,
 'test_asr': 0.9771111111111112,
 'test_ra': 0.021777777777777778}
2024-11-18:12:41:02 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 42,
 'test_acc': 0.8252,
 'test_asr': 0.9785555555555555,
 'test_ra': 0.020444444444444446}
2024-11-18:12:41:06 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 48,
 'test_acc': 0.8253,
 'test_asr': 0.9781111111111112,
 'test_ra': 0.020888888888888887}
2024-11-18:12:41:09 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 54,
 'test_acc': 0.8254,
 'test_asr': 0.9776666666666667,
 'test_ra': 0.021333333333333333}
2024-11-18:12:41:13 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 60,
 'test_acc': 0.8256,
 'test_asr': 0.9772222222222222,
 'test_ra': 0.021777777777777778}
2024-11-18:12:41:17 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 66,
 'test_acc': 0.825,
 'test_asr': 0.9775555555555555,
 'test_ra': 0.021444444444444443}
2024-11-18:12:41:20 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 72,
 'test_acc': 0.8251,
 'test_asr': 0.9777777777777777,
 'test_ra': 0.021222222222222222}
2024-11-18:12:41:24 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 78,
 'test_acc': 0.8248,
 'test_asr': 0.977,
 'test_ra': 0.022}
2024-11-18:12:41:28 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 84,
 'test_acc': 0.8246,
 'test_asr': 0.9768888888888889,
 'test_ra': 0.022111111111111113}
2024-11-18:12:41:31 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 90,
 'test_acc': 0.8247,
 'test_asr': 0.9757777777777777,
 'test_ra': 0.02322222222222222}
2024-11-18:12:41:35 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 96,
 'test_acc': 0.8252,
 'test_asr': 0.9754444444444444,
 'test_ra': 0.023555555555555555}
2024-11-18:12:41:39 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 102,
 'test_acc': 0.8247,
 'test_asr': 0.9761111111111112,
 'test_ra': 0.023}
2024-11-18:12:41:43 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 108,
 'test_acc': 0.8249,
 'test_asr': 0.9757777777777777,
 'test_ra': 0.02322222222222222}
2024-11-18:12:41:47 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 114,
 'test_acc': 0.8251,
 'test_asr': 0.9756666666666667,
 'test_ra': 0.023333333333333334}
2024-11-18:12:41:51 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 120,
 'test_acc': 0.8251,
 'test_asr': 0.9774444444444444,
 'test_ra': 0.021555555555555557}
2024-11-18:12:41:54 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 126,
 'test_acc': 0.8248,
 'test_asr': 0.9768888888888889,
 'test_ra': 0.022111111111111113}
2024-11-18:12:41:58 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 132,
 'test_acc': 0.8252,
 'test_asr': 0.9768888888888889,
 'test_ra': 0.022222222222222223}
2024-11-18:12:42:02 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 138,
 'test_acc': 0.8259,
 'test_asr': 0.977,
 'test_ra': 0.022111111111111113}
2024-11-18:12:42:06 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 144,
 'test_acc': 0.8255,
 'test_asr': 0.9775555555555555,
 'test_ra': 0.021444444444444443}
2024-11-18:12:42:10 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 150,
 'test_acc': 0.8257,
 'test_asr': 0.977,
 'test_ra': 0.022}
2024-11-18:12:42:13 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 156,
 'test_acc': 0.8253,
 'test_asr': 0.9777777777777777,
 'test_ra': 0.021222222222222222}
2024-11-18:12:42:17 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 162,
 'test_acc': 0.8249,
 'test_asr': 0.978,
 'test_ra': 0.021}
2024-11-18:12:42:20 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 168,
 'test_acc': 0.8255,
 'test_asr': 0.9778888888888889,
 'test_ra': 0.021111111111111112}
2024-11-18:12:42:24 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 174,
 'test_acc': 0.8258,
 'test_asr': 0.9774444444444444,
 'test_ra': 0.021555555555555557}
2024-11-18:12:42:28 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 180,
 'test_acc': 0.8265,
 'test_asr': 0.9784444444444444,
 'test_ra': 0.020555555555555556}
2024-11-18:12:42:32 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 186,
 'test_acc': 0.8257,
 'test_asr': 0.9786666666666667,
 'test_ra': 0.02033333333333333}
2024-11-18:12:42:36 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 192,
 'test_acc': 0.826,
 'test_asr': 0.9792222222222222,
 'test_ra': 0.019777777777777776}
2024-11-18:12:42:39 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 198,
 'test_acc': 0.8253,
 'test_asr': 0.9797777777777777,
 'test_ra': 0.019222222222222224}
2024-11-18:12:42:43 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 204,
 'test_acc': 0.8254,
 'test_asr': 0.976,
 'test_ra': 0.023}
2024-11-18:12:42:47 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 210,
 'test_acc': 0.826,
 'test_asr': 0.9772222222222222,
 'test_ra': 0.021777777777777778}
2024-11-18:12:42:50 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 216,
 'test_acc': 0.8258,
 'test_asr': 0.9771111111111112,
 'test_ra': 0.02188888888888889}
2024-11-18:12:42:54 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 222,
 'test_acc': 0.825,
 'test_asr': 0.9762222222222222,
 'test_ra': 0.02277777777777778}
2024-11-18:12:42:58 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 228,
 'test_acc': 0.825,
 'test_asr': 0.9753333333333334,
 'test_ra': 0.023666666666666666}
2024-11-18:12:43:01 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 234,
 'test_acc': 0.8242,
 'test_asr': 0.9734444444444444,
 'test_ra': 0.025444444444444443}
2024-11-18:12:43:05 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 240,
 'test_acc': 0.8246,
 'test_asr': 0.9741111111111111,
 'test_ra': 0.024888888888888887}
2024-11-18:12:43:09 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 246,
 'test_acc': 0.8241,
 'test_asr': 0.974,
 'test_ra': 0.025}
2024-11-18:12:43:13 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 252,
 'test_acc': 0.8239,
 'test_asr': 0.9748888888888889,
 'test_ra': 0.02411111111111111}
2024-11-18:12:43:16 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 258,
 'test_acc': 0.8234,
 'test_asr': 0.974,
 'test_ra': 0.024888888888888887}
2024-11-18:12:43:20 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 264,
 'test_acc': 0.8241,
 'test_asr': 0.9757777777777777,
 'test_ra': 0.02322222222222222}
2024-11-18:12:43:24 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 270,
 'test_acc': 0.8239,
 'test_asr': 0.973,
 'test_ra': 0.025777777777777778}
2024-11-18:12:43:28 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 276,
 'test_acc': 0.824,
 'test_asr': 0.9722222222222222,
 'test_ra': 0.02666666666666667}
2024-11-18:12:43:31 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 282,
 'test_acc': 0.824,
 'test_asr': 0.9731111111111111,
 'test_ra': 0.02588888888888889}
2024-11-18:12:43:35 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 288,
 'test_acc': 0.8239,
 'test_asr': 0.9708888888888889,
 'test_ra': 0.02788888888888889}
2024-11-18:12:43:39 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 294,
 'test_acc': 0.8235,
 'test_asr': 0.9713333333333334,
 'test_ra': 0.027444444444444445}
2024-11-18:12:43:42 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 300,
 'test_acc': 0.8237,
 'test_asr': 0.9706666666666667,
 'test_ra': 0.02811111111111111}
2024-11-18:12:43:46 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 306,
 'test_acc': 0.8231,
 'test_asr': 0.971,
 'test_ra': 0.027777777777777776}
2024-11-18:12:43:50 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 312,
 'test_acc': 0.8224,
 'test_asr': 0.966,
 'test_ra': 0.03233333333333333}
2024-11-18:12:43:53 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 318,
 'test_acc': 0.822,
 'test_asr': 0.9627777777777777,
 'test_ra': 0.035222222222222224}
2024-11-18:12:43:57 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 324,
 'test_acc': 0.8216,
 'test_asr': 0.9643333333333334,
 'test_ra': 0.033777777777777775}
2024-11-18:12:44:01 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 330,
 'test_acc': 0.8213,
 'test_asr': 0.9635555555555556,
 'test_ra': 0.034444444444444444}
2024-11-18:12:44:05 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 336,
 'test_acc': 0.8213,
 'test_asr': 0.9611111111111111,
 'test_ra': 0.036444444444444446}
2024-11-18:12:44:09 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 342,
 'test_acc': 0.8196,
 'test_asr': 0.9603333333333334,
 'test_ra': 0.03677777777777778}
2024-11-18:12:44:12 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 348,
 'test_acc': 0.819,
 'test_asr': 0.9541111111111111,
 'test_ra': 0.042222222222222223}
2024-11-18:12:44:16 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 354,
 'test_acc': 0.8195,
 'test_asr': 0.9526666666666667,
 'test_ra': 0.043333333333333335}
2024-11-18:12:44:20 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 360,
 'test_acc': 0.8198,
 'test_asr': 0.9543333333333334,
 'test_ra': 0.042}
2024-11-18:12:44:24 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 366,
 'test_acc': 0.8196,
 'test_asr': 0.9513333333333334,
 'test_ra': 0.04455555555555556}
2024-11-18:12:44:27 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 372,
 'test_acc': 0.8197,
 'test_asr': 0.9511111111111111,
 'test_ra': 0.04488888888888889}
2024-11-18:12:44:31 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 378,
 'test_acc': 0.8201,
 'test_asr': 0.9481111111111111,
 'test_ra': 0.04755555555555555}
2024-11-18:12:44:35 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 384,
 'test_acc': 0.8191,
 'test_asr': 0.9405555555555556,
 'test_ra': 0.05444444444444444}
2024-11-18:12:44:39 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 390,
 'test_acc': 0.8193,
 'test_asr': 0.9355555555555556,
 'test_ra': 0.058333333333333334}
2024-11-18:12:44:42 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 396,
 'test_acc': 0.819,
 'test_asr': 0.9293333333333333,
 'test_ra': 0.06355555555555556}
2024-11-18:12:44:46 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 402,
 'test_acc': 0.8202,
 'test_asr': 0.9302222222222222,
 'test_ra': 0.06433333333333334}
2024-11-18:12:44:50 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 408,
 'test_acc': 0.8206,
 'test_asr': 0.9142222222222223,
 'test_ra': 0.07922222222222222}
2024-11-18:12:44:54 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 414,
 'test_acc': 0.8203,
 'test_asr': 0.8912222222222222,
 'test_ra': 0.10044444444444445}
2024-11-18:12:44:57 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 420,
 'test_acc': 0.8211,
 'test_asr': 0.8661111111111112,
 'test_ra': 0.12255555555555556}
2024-11-18:12:45:01 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 426,
 'test_acc': 0.82,
 'test_asr': 0.8504444444444444,
 'test_ra': 0.13655555555555557}
2024-11-18:12:45:05 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 432,
 'test_acc': 0.8208,
 'test_asr': 0.8535555555555555,
 'test_ra': 0.13355555555555557}
2024-11-18:12:45:09 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 438,
 'test_acc': 0.8206,
 'test_asr': 0.8705555555555555,
 'test_ra': 0.11888888888888889}
2024-11-18:12:45:12 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 444,
 'test_acc': 0.8196,
 'test_asr': 0.8666666666666667,
 'test_ra': 0.12155555555555556}
2024-11-18:12:45:16 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 450,
 'test_acc': 0.819,
 'test_asr': 0.8716666666666667,
 'test_ra': 0.11688888888888889}
2024-11-18:12:45:20 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 456,
 'test_acc': 0.8176,
 'test_asr': 0.8832222222222222,
 'test_ra': 0.10666666666666667}
2024-11-18:12:45:24 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 462,
 'test_acc': 0.8142,
 'test_asr': 0.8652222222222222,
 'test_ra': 0.12055555555555555}
2024-11-18:12:45:27 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 468,
 'test_acc': 0.813,
 'test_asr': 0.7883333333333333,
 'test_ra': 0.18366666666666667}
2024-11-18:12:45:31 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 474,
 'test_acc': 0.8148,
 'test_asr': 0.7937777777777778,
 'test_ra': 0.17622222222222222}
2024-11-18:12:45:35 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 480,
 'test_acc': 0.8156,
 'test_asr': 0.7454444444444445,
 'test_ra': 0.20433333333333334}
2024-11-18:12:45:39 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 486,
 'test_acc': 0.8061,
 'test_asr': 0.7694444444444445,
 'test_ra': 0.17622222222222222}
2024-11-18:12:45:42 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 492,
 'test_acc': 0.7757,
 'test_asr': 0.7028888888888889,
 'test_ra': 0.224}
2024-11-18:12:45:46 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 498,
 'test_acc': 0.7448,
 'test_asr': 0.6351111111111111,
 'test_ra': 0.2518888888888889}
2024-11-18:12:45:50 [INFO    ] [trainer_cls.py:65] {'all_filter_num': 512,
 'num_pruned': 504,
 'test_acc': 0.6128,
 'test_asr': 0.5537777777777778,
 'test_ra': 0.2081111111111111}
2024-11-18:12:45:50 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-18:12:45:50 [DEBUG   ] [trainer_cls.py:88] return df with np.nan and None converted by str()
2024-11-18:12:45:50 [DEBUG   ] [pyplot.py:414] Loaded backend agg version v2.2.
2024-11-18:12:45:50 [INFO    ] [fp.py:395] End prune. Pruned 504/512 test_acc:0.61  test_asr:0.55  test_ra:0.21  
2024-11-18:12:45:50 [DEBUG   ] [trainer_cls.py:1765] This class REQUIRE bd dataset to implement overwrite methods. This is NOT a general class for all cls task.
2024-11-18:12:45:50 [INFO    ] [trainer_cls.py:972] Do NOT set the settings/parameters attr manually after you start training!
You may break the relationship between them.
2024-11-18:12:45:51 [INFO    ] [trainer_cls.py:1030] ('epoch_now:0, '
 'batch_now:0self.amp:True,self.criterion:CrossEntropyLoss(),self.optimizer:SGD '
 '(\n'
 'Parameter Group 0\n'
 '    dampening: 0\n'
 '    differentiable: False\n'
 '    foreach: None\n'
 '    initial_lr: 0.01\n'
 '    lr: 0.01\n'
 '    maximize: False\n'
 '    momentum: 0.9\n'
 '    nesterov: False\n'
 '    weight_decay: 0.0005\n'
 "),self.scheduler:{'T_max': 100, 'eta_min': 0, 'base_lrs': [0.01], "
 "'last_epoch': 0, 'verbose': False, '_step_count': 1, "
 "'_get_lr_called_within_step': False, '_last_lr': "
 "[0.01]},self.scaler:{'scale': 65536.0, 'growth_factor': 2.0, "
 "'backoff_factor': 0.5, 'growth_interval': 2000, '_growth_tracker': 0})")
2024-11-18:12:45:51 [INFO    ] [trainer_cls.py:1800] one epoch training part done, use time = 0.6532678604125977 s
2024-11-18:12:45:51 [WARNING ] [trainer_cls.py:590] zero len array in func all_acc(), return None!
2024-11-18:12:45:51 [WARNING ] [trainer_cls.py:590] zero len array in func all_acc(), return None!
2024-11-18:12:45:53 [INFO    ] [trainer_cls.py:65] {'batch': 10,
 'bd_test_loss_avg_over_batch': 2.151929199695587,
 'clean_test_loss_avg_over_batch': 1.5442459732294083,
 'epoch': 0,
 'test_acc': 0.6485,
 'test_asr': 0.17433333333333334,
 'test_ra': 0.39255555555555555,
 'train_acc': 0.6552,
 'train_acc_clean_only': 0.6552,
 'train_epoch_loss_avg_over_batch': 1.8659794449806213}
2024-11-18:12:45:53 [WARNING ] [trainer_cls.py:916] train_asr_list contains None, or len not match
2024-11-18:12:45:53 [WARNING ] [trainer_cls.py:920] train_ra_list contains None, or len not match
2024-11-18:12:45:53 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-18:12:45:53 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-18:12:45:54 [INFO    ] [trainer_cls.py:1800] one epoch training part done, use time = 0.5281870365142822 s
2024-11-18:12:45:54 [WARNING ] [trainer_cls.py:590] zero len array in func all_acc(), return None!
2024-11-18:12:45:54 [WARNING ] [trainer_cls.py:590] zero len array in func all_acc(), return None!
2024-11-18:12:45:56 [INFO    ] [trainer_cls.py:65] {'batch': 10,
 'bd_test_loss_avg_over_batch': 3.658172501458062,
 'clean_test_loss_avg_over_batch': 0.9832518965005874,
 'epoch': 1,
 'test_acc': 0.7051,
 'test_asr': 0.0022222222222222222,
 'test_ra': 0.49577777777777776,
 'train_acc': 0.722,
 'train_acc_clean_only': 0.722,
 'train_epoch_loss_avg_over_batch': 1.3184910416603088}
2024-11-18:12:45:56 [WARNING ] [trainer_cls.py:916] train_asr_list contains None, or len not match
2024-11-18:12:45:56 [WARNING ] [trainer_cls.py:920] train_ra_list contains None, or len not match
2024-11-18:12:45:56 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-18:12:45:56 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-18:12:45:56 [INFO    ] [trainer_cls.py:1800] one epoch training part done, use time = 0.5307357311248779 s
2024-11-18:12:45:56 [WARNING ] [trainer_cls.py:590] zero len array in func all_acc(), return None!
2024-11-18:12:45:56 [WARNING ] [trainer_cls.py:590] zero len array in func all_acc(), return None!
2024-11-18:12:45:58 [INFO    ] [trainer_cls.py:65] {'batch': 10,
 'bd_test_loss_avg_over_batch': 6.638477444648743,
 'clean_test_loss_avg_over_batch': 0.599636398255825,
 'epoch': 2,
 'test_acc': 0.7947,
 'test_asr': 0.0007777777777777777,
 'test_ra': 0.4002222222222222,
 'train_acc': 0.7928,
 'train_acc_clean_only': 0.7928,
 'train_epoch_loss_avg_over_batch': 0.7678056210279465}
2024-11-18:12:45:58 [WARNING ] [trainer_cls.py:916] train_asr_list contains None, or len not match
2024-11-18:12:45:58 [WARNING ] [trainer_cls.py:920] train_ra_list contains None, or len not match
2024-11-18:12:45:58 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-18:12:45:59 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-18:12:45:59 [INFO    ] [trainer_cls.py:1800] one epoch training part done, use time = 0.5334150791168213 s
2024-11-18:12:45:59 [WARNING ] [trainer_cls.py:590] zero len array in func all_acc(), return None!
2024-11-18:12:45:59 [WARNING ] [trainer_cls.py:590] zero len array in func all_acc(), return None!
2024-11-18:12:46:01 [INFO    ] [trainer_cls.py:65] {'batch': 10,
 'bd_test_loss_avg_over_batch': 12.025637096828884,
 'clean_test_loss_avg_over_batch': 0.4214862145483494,
 'epoch': 3,
 'test_acc': 0.8588,
 'test_asr': 0.0032222222222222222,
 'test_ra': 0.2828888888888889,
 'train_acc': 0.9128,
 'train_acc_clean_only': 0.9128,
 'train_epoch_loss_avg_over_batch': 0.37619475424289706}
2024-11-18:12:46:01 [WARNING ] [trainer_cls.py:916] train_asr_list contains None, or len not match
2024-11-18:12:46:01 [WARNING ] [trainer_cls.py:920] train_ra_list contains None, or len not match
2024-11-18:12:46:01 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-18:12:46:01 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-18:12:46:01 [INFO    ] [trainer_cls.py:1800] one epoch training part done, use time = 0.5337066650390625 s
2024-11-18:12:46:01 [WARNING ] [trainer_cls.py:590] zero len array in func all_acc(), return None!
2024-11-18:12:46:01 [WARNING ] [trainer_cls.py:590] zero len array in func all_acc(), return None!
2024-11-18:12:46:03 [INFO    ] [trainer_cls.py:65] {'batch': 10,
 'bd_test_loss_avg_over_batch': 9.549869484371609,
 'clean_test_loss_avg_over_batch': 0.3821397006511688,
 'epoch': 4,
 'test_acc': 0.8706,
 'test_asr': 0.022444444444444444,
 'test_ra': 0.4728888888888889,
 'train_acc': 0.952,
 'train_acc_clean_only': 0.952,
 'train_epoch_loss_avg_over_batch': 0.20816213488578797}
2024-11-18:12:46:03 [WARNING ] [trainer_cls.py:916] train_asr_list contains None, or len not match
2024-11-18:12:46:03 [WARNING ] [trainer_cls.py:920] train_ra_list contains None, or len not match
2024-11-18:12:46:03 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-18:12:46:04 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-18:12:46:04 [INFO    ] [trainer_cls.py:1800] one epoch training part done, use time = 0.5359680652618408 s
2024-11-18:12:46:04 [WARNING ] [trainer_cls.py:590] zero len array in func all_acc(), return None!
2024-11-18:12:46:04 [WARNING ] [trainer_cls.py:590] zero len array in func all_acc(), return None!
2024-11-18:12:46:06 [INFO    ] [trainer_cls.py:65] {'batch': 10,
 'bd_test_loss_avg_over_batch': 9.899259196387398,
 'clean_test_loss_avg_over_batch': 0.3634590946137905,
 'epoch': 5,
 'test_acc': 0.8845,
 'test_asr': 0.021666666666666667,
 'test_ra': 0.4464444444444444,
 'train_acc': 0.9636,
 'train_acc_clean_only': 0.9636,
 'train_epoch_loss_avg_over_batch': 0.13367807418107985}
2024-11-18:12:46:06 [WARNING ] [trainer_cls.py:916] train_asr_list contains None, or len not match
2024-11-18:12:46:06 [WARNING ] [trainer_cls.py:920] train_ra_list contains None, or len not match
2024-11-18:12:46:06 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-18:12:46:06 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-18:12:46:07 [INFO    ] [trainer_cls.py:1800] one epoch training part done, use time = 0.5368094444274902 s
2024-11-18:12:46:07 [WARNING ] [trainer_cls.py:590] zero len array in func all_acc(), return None!
2024-11-18:12:46:07 [WARNING ] [trainer_cls.py:590] zero len array in func all_acc(), return None!
2024-11-18:12:46:08 [INFO    ] [trainer_cls.py:65] {'batch': 10,
 'bd_test_loss_avg_over_batch': 11.066029257244534,
 'clean_test_loss_avg_over_batch': 0.3421361580491066,
 'epoch': 6,
 'test_acc': 0.8881,
 'test_asr': 0.010888888888888889,
 'test_ra': 0.42333333333333334,
 'train_acc': 0.982,
 'train_acc_clean_only': 0.982,
 'train_epoch_loss_avg_over_batch': 0.08949924111366273}
2024-11-18:12:46:09 [WARNING ] [trainer_cls.py:916] train_asr_list contains None, or len not match
2024-11-18:12:46:09 [WARNING ] [trainer_cls.py:920] train_ra_list contains None, or len not match
2024-11-18:12:46:09 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-18:12:46:09 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-18:12:46:09 [INFO    ] [trainer_cls.py:1800] one epoch training part done, use time = 0.5331692695617676 s
2024-11-18:12:46:09 [WARNING ] [trainer_cls.py:590] zero len array in func all_acc(), return None!
2024-11-18:12:46:09 [WARNING ] [trainer_cls.py:590] zero len array in func all_acc(), return None!
2024-11-18:12:46:11 [INFO    ] [trainer_cls.py:65] {'batch': 10,
 'bd_test_loss_avg_over_batch': 12.201153251859877,
 'clean_test_loss_avg_over_batch': 0.3447683617472649,
 'epoch': 7,
 'test_acc': 0.8911,
 'test_asr': 0.012,
 'test_ra': 0.39266666666666666,
 'train_acc': 0.9884,
 'train_acc_clean_only': 0.9884,
 'train_epoch_loss_avg_over_batch': 0.06696776226162911}
2024-11-18:12:46:11 [WARNING ] [trainer_cls.py:916] train_asr_list contains None, or len not match
2024-11-18:12:46:11 [WARNING ] [trainer_cls.py:920] train_ra_list contains None, or len not match
2024-11-18:12:46:11 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-18:12:46:12 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-18:12:46:12 [INFO    ] [trainer_cls.py:1800] one epoch training part done, use time = 0.5417642593383789 s
2024-11-18:12:46:12 [WARNING ] [trainer_cls.py:590] zero len array in func all_acc(), return None!
2024-11-18:12:46:12 [WARNING ] [trainer_cls.py:590] zero len array in func all_acc(), return None!
2024-11-18:12:46:14 [INFO    ] [trainer_cls.py:65] {'batch': 10,
 'bd_test_loss_avg_over_batch': 12.035992304484049,
 'clean_test_loss_avg_over_batch': 0.34978052638471124,
 'epoch': 8,
 'test_acc': 0.8916,
 'test_asr': 0.011,
 'test_ra': 0.405,
 'train_acc': 0.9908,
 'train_acc_clean_only': 0.9908,
 'train_epoch_loss_avg_over_batch': 0.05265771858394146}
2024-11-18:12:46:14 [WARNING ] [trainer_cls.py:916] train_asr_list contains None, or len not match
2024-11-18:12:46:14 [WARNING ] [trainer_cls.py:920] train_ra_list contains None, or len not match
2024-11-18:12:46:14 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-18:12:46:14 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-18:12:46:15 [INFO    ] [trainer_cls.py:1800] one epoch training part done, use time = 0.5393257141113281 s
2024-11-18:12:46:15 [WARNING ] [trainer_cls.py:590] zero len array in func all_acc(), return None!
2024-11-18:12:46:15 [WARNING ] [trainer_cls.py:590] zero len array in func all_acc(), return None!
2024-11-18:12:46:16 [INFO    ] [trainer_cls.py:65] {'batch': 10,
 'bd_test_loss_avg_over_batch': 13.79073166847229,
 'clean_test_loss_avg_over_batch': 0.3537091605365276,
 'epoch': 9,
 'test_acc': 0.8906,
 'test_asr': 0.008,
 'test_ra': 0.35455555555555557,
 'train_acc': 0.992,
 'train_acc_clean_only': 0.992,
 'train_epoch_loss_avg_over_batch': 0.04171510599553585}
2024-11-18:12:46:17 [WARNING ] [trainer_cls.py:916] train_asr_list contains None, or len not match
2024-11-18:12:46:17 [WARNING ] [trainer_cls.py:920] train_ra_list contains None, or len not match
2024-11-18:12:46:17 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-18:12:46:17 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-18:12:46:17 [INFO    ] [trainer_cls.py:1800] one epoch training part done, use time = 0.5372209548950195 s
2024-11-18:12:46:17 [WARNING ] [trainer_cls.py:590] zero len array in func all_acc(), return None!
2024-11-18:12:46:17 [WARNING ] [trainer_cls.py:590] zero len array in func all_acc(), return None!
2024-11-18:12:46:19 [INFO    ] [trainer_cls.py:65] {'batch': 10,
 'bd_test_loss_avg_over_batch': 13.753609763251411,
 'clean_test_loss_avg_over_batch': 0.3663675658404827,
 'epoch': 10,
 'test_acc': 0.8921,
 'test_asr': 0.009888888888888888,
 'test_ra': 0.37377777777777776,
 'train_acc': 0.9928,
 'train_acc_clean_only': 0.9928,
 'train_epoch_loss_avg_over_batch': 0.03924291245639324}
2024-11-18:12:46:19 [WARNING ] [trainer_cls.py:916] train_asr_list contains None, or len not match
2024-11-18:12:46:19 [WARNING ] [trainer_cls.py:920] train_ra_list contains None, or len not match
2024-11-18:12:46:19 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-18:12:46:19 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-18:12:46:20 [INFO    ] [trainer_cls.py:1800] one epoch training part done, use time = 0.5403163433074951 s
2024-11-18:12:46:20 [WARNING ] [trainer_cls.py:590] zero len array in func all_acc(), return None!
2024-11-18:12:46:20 [WARNING ] [trainer_cls.py:590] zero len array in func all_acc(), return None!
2024-11-18:12:46:22 [INFO    ] [trainer_cls.py:65] {'batch': 10,
 'bd_test_loss_avg_over_batch': 13.19942307472229,
 'clean_test_loss_avg_over_batch': 0.3589850090444088,
 'epoch': 11,
 'test_acc': 0.8925,
 'test_asr': 0.015666666666666666,
 'test_ra': 0.37722222222222224,
 'train_acc': 0.9956,
 'train_acc_clean_only': 0.9956,
 'train_epoch_loss_avg_over_batch': 0.029873048327863215}
2024-11-18:12:46:22 [WARNING ] [trainer_cls.py:916] train_asr_list contains None, or len not match
2024-11-18:12:46:22 [WARNING ] [trainer_cls.py:920] train_ra_list contains None, or len not match
2024-11-18:12:46:22 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-18:12:46:22 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-18:12:46:22 [INFO    ] [trainer_cls.py:1800] one epoch training part done, use time = 0.5403387546539307 s
2024-11-18:12:46:22 [WARNING ] [trainer_cls.py:590] zero len array in func all_acc(), return None!
2024-11-18:12:46:22 [WARNING ] [trainer_cls.py:590] zero len array in func all_acc(), return None!
2024-11-18:12:46:24 [INFO    ] [trainer_cls.py:65] {'batch': 10,
 'bd_test_loss_avg_over_batch': 13.517919037077162,
 'clean_test_loss_avg_over_batch': 0.353657690435648,
 'epoch': 12,
 'test_acc': 0.8919,
 'test_asr': 0.013,
 'test_ra': 0.3923333333333333,
 'train_acc': 0.9976,
 'train_acc_clean_only': 0.9976,
 'train_epoch_loss_avg_over_batch': 0.022876471932977437}
2024-11-18:12:46:24 [WARNING ] [trainer_cls.py:916] train_asr_list contains None, or len not match
2024-11-18:12:46:24 [WARNING ] [trainer_cls.py:920] train_ra_list contains None, or len not match
2024-11-18:12:46:24 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-18:12:46:25 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-18:12:46:25 [INFO    ] [trainer_cls.py:1800] one epoch training part done, use time = 0.539175271987915 s
2024-11-18:12:46:25 [WARNING ] [trainer_cls.py:590] zero len array in func all_acc(), return None!
2024-11-18:12:46:25 [WARNING ] [trainer_cls.py:590] zero len array in func all_acc(), return None!
2024-11-18:12:46:27 [INFO    ] [trainer_cls.py:65] {'batch': 10,
 'bd_test_loss_avg_over_batch': 13.010809395048353,
 'clean_test_loss_avg_over_batch': 0.36006558910012243,
 'epoch': 13,
 'test_acc': 0.8945,
 'test_asr': 0.017,
 'test_ra': 0.41833333333333333,
 'train_acc': 0.9992,
 'train_acc_clean_only': 0.9992,
 'train_epoch_loss_avg_over_batch': 0.018575249426066875}
2024-11-18:12:46:27 [WARNING ] [trainer_cls.py:916] train_asr_list contains None, or len not match
2024-11-18:12:46:27 [WARNING ] [trainer_cls.py:920] train_ra_list contains None, or len not match
2024-11-18:12:46:27 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-18:12:46:27 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-18:12:46:28 [INFO    ] [trainer_cls.py:1800] one epoch training part done, use time = 0.5306718349456787 s
2024-11-18:12:46:28 [WARNING ] [trainer_cls.py:590] zero len array in func all_acc(), return None!
2024-11-18:12:46:28 [WARNING ] [trainer_cls.py:590] zero len array in func all_acc(), return None!
2024-11-18:12:46:29 [INFO    ] [trainer_cls.py:65] {'batch': 10,
 'bd_test_loss_avg_over_batch': 13.302823225657145,
 'clean_test_loss_avg_over_batch': 0.37235622964799403,
 'epoch': 14,
 'test_acc': 0.8957,
 'test_asr': 0.02033333333333333,
 'test_ra': 0.4043333333333333,
 'train_acc': 0.9988,
 'train_acc_clean_only': 0.9988,
 'train_epoch_loss_avg_over_batch': 0.01661217734217644}
2024-11-18:12:46:29 [WARNING ] [trainer_cls.py:916] train_asr_list contains None, or len not match
2024-11-18:12:46:29 [WARNING ] [trainer_cls.py:920] train_ra_list contains None, or len not match
2024-11-18:12:46:30 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-18:12:46:30 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-18:12:46:30 [INFO    ] [trainer_cls.py:1800] one epoch training part done, use time = 0.531794548034668 s
2024-11-18:12:46:30 [WARNING ] [trainer_cls.py:590] zero len array in func all_acc(), return None!
2024-11-18:12:46:30 [WARNING ] [trainer_cls.py:590] zero len array in func all_acc(), return None!
2024-11-18:12:46:32 [INFO    ] [trainer_cls.py:65] {'batch': 10,
 'bd_test_loss_avg_over_batch': 13.457128736707899,
 'clean_test_loss_avg_over_batch': 0.38464492931962013,
 'epoch': 15,
 'test_acc': 0.8964,
 'test_asr': 0.021111111111111112,
 'test_ra': 0.4093333333333333,
 'train_acc': 0.9988,
 'train_acc_clean_only': 0.9988,
 'train_epoch_loss_avg_over_batch': 0.01527462862432003}
2024-11-18:12:46:32 [WARNING ] [trainer_cls.py:916] train_asr_list contains None, or len not match
2024-11-18:12:46:32 [WARNING ] [trainer_cls.py:920] train_ra_list contains None, or len not match
2024-11-18:12:46:32 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-18:12:46:32 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-18:12:46:33 [INFO    ] [trainer_cls.py:1800] one epoch training part done, use time = 0.5395345687866211 s
2024-11-18:12:46:33 [WARNING ] [trainer_cls.py:590] zero len array in func all_acc(), return None!
2024-11-18:12:46:33 [WARNING ] [trainer_cls.py:590] zero len array in func all_acc(), return None!
2024-11-18:12:46:35 [INFO    ] [trainer_cls.py:65] {'batch': 10,
 'bd_test_loss_avg_over_batch': 14.90385365486145,
 'clean_test_loss_avg_over_batch': 0.3856300052255392,
 'epoch': 16,
 'test_acc': 0.8938,
 'test_asr': 0.01211111111111111,
 'test_ra': 0.37533333333333335,
 'train_acc': 0.9984,
 'train_acc_clean_only': 0.9984,
 'train_epoch_loss_avg_over_batch': 0.01402655616402626}
2024-11-18:12:46:35 [WARNING ] [trainer_cls.py:916] train_asr_list contains None, or len not match
2024-11-18:12:46:35 [WARNING ] [trainer_cls.py:920] train_ra_list contains None, or len not match
2024-11-18:12:46:35 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-18:12:46:35 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-18:12:46:35 [INFO    ] [trainer_cls.py:1800] one epoch training part done, use time = 0.5359532833099365 s
2024-11-18:12:46:35 [WARNING ] [trainer_cls.py:590] zero len array in func all_acc(), return None!
2024-11-18:12:46:35 [WARNING ] [trainer_cls.py:590] zero len array in func all_acc(), return None!
2024-11-18:12:46:37 [INFO    ] [trainer_cls.py:65] {'batch': 10,
 'bd_test_loss_avg_over_batch': 16.28846984439426,
 'clean_test_loss_avg_over_batch': 0.38847862035036085,
 'epoch': 17,
 'test_acc': 0.8953,
 'test_asr': 0.0071111111111111115,
 'test_ra': 0.3447777777777778,
 'train_acc': 1.0,
 'train_acc_clean_only': 1.0,
 'train_epoch_loss_avg_over_batch': 0.012751793581992387}
2024-11-18:12:46:37 [WARNING ] [trainer_cls.py:916] train_asr_list contains None, or len not match
2024-11-18:12:46:37 [WARNING ] [trainer_cls.py:920] train_ra_list contains None, or len not match
2024-11-18:12:46:37 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-18:12:46:38 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-18:12:46:38 [INFO    ] [trainer_cls.py:1800] one epoch training part done, use time = 0.5393249988555908 s
2024-11-18:12:46:38 [WARNING ] [trainer_cls.py:590] zero len array in func all_acc(), return None!
2024-11-18:12:46:38 [WARNING ] [trainer_cls.py:590] zero len array in func all_acc(), return None!
2024-11-18:12:46:40 [INFO    ] [trainer_cls.py:65] {'batch': 10,
 'bd_test_loss_avg_over_batch': 15.323763052622477,
 'clean_test_loss_avg_over_batch': 0.3955777004361153,
 'epoch': 18,
 'test_acc': 0.8954,
 'test_asr': 0.012222222222222223,
 'test_ra': 0.37355555555555553,
 'train_acc': 0.9988,
 'train_acc_clean_only': 0.9988,
 'train_epoch_loss_avg_over_batch': 0.012017422448843717}
2024-11-18:12:46:40 [WARNING ] [trainer_cls.py:916] train_asr_list contains None, or len not match
2024-11-18:12:46:40 [WARNING ] [trainer_cls.py:920] train_ra_list contains None, or len not match
2024-11-18:12:46:40 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-18:12:46:40 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-18:12:46:41 [INFO    ] [trainer_cls.py:1800] one epoch training part done, use time = 0.5394277572631836 s
2024-11-18:12:46:41 [WARNING ] [trainer_cls.py:590] zero len array in func all_acc(), return None!
2024-11-18:12:46:41 [WARNING ] [trainer_cls.py:590] zero len array in func all_acc(), return None!
2024-11-18:12:46:42 [INFO    ] [trainer_cls.py:65] {'batch': 10,
 'bd_test_loss_avg_over_batch': 15.39585412873162,
 'clean_test_loss_avg_over_batch': 0.37632663231343033,
 'epoch': 19,
 'test_acc': 0.8963,
 'test_asr': 0.013444444444444445,
 'test_ra': 0.36533333333333334,
 'train_acc': 0.9996,
 'train_acc_clean_only': 0.9996,
 'train_epoch_loss_avg_over_batch': 0.009769571293145419}
2024-11-18:12:46:43 [WARNING ] [trainer_cls.py:916] train_asr_list contains None, or len not match
2024-11-18:12:46:43 [WARNING ] [trainer_cls.py:920] train_ra_list contains None, or len not match
2024-11-18:12:46:43 [DEBUG   ] [trainer_cls.py:72] return df with np.nan and None converted by str()
2024-11-18:12:46:43 [DEBUG   ] [trainer_cls.py:88] return df with np.nan and None converted by str()
2024-11-18:12:46:43 [INFO    ] [save_load_attack.py:176] saving...
2024-11-18:12:46:43 [DEBUG   ] [save_load_attack.py:177] location : record/sig_0_1_RN18FR/defense/fp/defense_result.pt
